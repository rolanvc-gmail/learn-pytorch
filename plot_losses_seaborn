{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "32199b24-7ae5-48c4-9d31-bdb80cdf0174",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "e17aa804-78d7-45b2-9779-1250e925dbd4",
   "metadata": {},
   "outputs": [],
   "source": [
    "myvar = pandas.read_pickle(\"losses.pkl\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "9d5163b6-cf2b-4d42-95ac-74e4dc214e2e",
   "metadata": {},
   "outputs": [],
   "source": [
    "newframe= pd.melt(myvar, \"epochs\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "797e6dbb-83ed-4f1f-a429-794c9efdb551",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = myvar.plot(x=\"epochs\", y=\"accuracy\", legend=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "246804cc-8751-4411-82ca-2a6c0a35fb28",
   "metadata": {},
   "outputs": [],
   "source": [
    "ax2 = ax.twinx()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "25e272fb-9e2e-4e94-86c7-fc76c4121865",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='epochs'>"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "myvar.plot(x=\"epochs\", y=\"losses\", ax=ax2, legend=False, color=\"r\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "29ec5819-1aa0-49d8-b7ed-21d7c50ddbb1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7efe36a8f4c0>"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "ax.figure.legend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "eeae6c8d-033a-4c8b-b0cc-08464bcf14fc",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "88936e95-1e68-4bc7-8c99-6255202e4f7c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "phd-experiments",
   "language": "python",
   "name": "phd-experiments"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
